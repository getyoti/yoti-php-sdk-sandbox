<?php

declare(strict_types=1);

namespace Yoti\Sandbox\DocScan;

use Psr\Http\Message\ResponseInterface;
use Yoti\Constants;
use Yoti\Http\Payload;
use Yoti\Http\Request;
use Yoti\Http\RequestBuilder;
use Yoti\Sandbox\DocScan\Exception\SandboxDocScanException;
use Yoti\Sandbox\DocScan\Request\SandboxResponseConfig;
use Yoti\Util\Config;
use Yoti\Util\PemFile;

class SandboxClient
{
    /** Default Doc Scan API URL */
    private const SANDBOX_URL = Constants::API_BASE_URL . '/sandbox/idverify/v1';

    /**
     * @var string
     */
    private $sdkId;

    /**
     * @var PemFile
     */
    private $pemFile;

    /**
     * @var Config
     */
    private $config;

    /**
     * @var string
     */
    private $apiUrl;

    /**
     * @param string $sdkId
     *   The SDK identifier generated by Yoti Hub when you create your app.
     * @param string $pem
     *   PEM file path or string
     * @param array<string, mixed> $options (optional)
     *   SDK configuration options - {@see \Yoti\Util\Config} for available options.
     *
     * @throws \Yoti\Exception\PemFileException
     */
    public function __construct(string $sdkId, string $pem, array $options = [])
    {
        $this->sdkId = $sdkId;
        $this->pemFile = PemFile::resolveFromString($pem);
        $this->config = new Config($options);
        $this->apiUrl = $this->config->getApiUrl() ?? self::SANDBOX_URL;
    }

    /**
     * @param string $sessionId
     * @param SandboxResponseConfig $responseConfig
     */
    public function configureSessionResponse(string $sessionId, SandboxResponseConfig $responseConfig): void
    {
        $response = (new RequestBuilder($this->config))
            ->withBaseUrl($this->apiUrl)
            ->withEndpoint("/sessions/{$sessionId}/response-config")
            ->withMethod(Request::METHOD_PUT)
            ->withPemFile($this->pemFile)
            ->withPayload(Payload::fromJsonData($responseConfig))
            ->withQueryParam('sdkId', $this->sdkId)
            ->build()
            ->execute();

        self::assertResponseIsSuccess($response);
    }

    /**
     * @param SandboxResponseConfig $responseConfig
     */
    public function configureApplicationResponse(SandboxResponseConfig $responseConfig): void
    {
        $response = (new RequestBuilder($this->config))
            ->withBaseUrl($this->apiUrl)
            ->withEndpoint("/apps/{$this->sdkId}/response-config")
            ->withMethod(Request::METHOD_PUT)
            ->withPemFile($this->pemFile)
            ->withPayload(Payload::fromJsonData($responseConfig))
            ->build()
            ->execute();

        self::assertResponseIsSuccess($response);
    }

    /**
     * @param ResponseInterface $response
     *
     * @throws SandboxDocScanException
     */
    private static function assertResponseIsSuccess(ResponseInterface $response): void
    {
        $httpCode = $response->getStatusCode();
        if ($httpCode < 200 || $httpCode > 299) {
            throw new SandboxDocScanException("Failed on status code: {$httpCode}", $response);
        }
    }
}
